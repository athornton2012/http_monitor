// Code generated by counterfeiter. DO NOT EDIT.
package monitorfakes

import (
	"sync"

	"github.com/athornton2012/http_monitor/monitor"
)

type FakeRollingTrafficList struct {
	HandleLogStub        func(int64) string
	handleLogMutex       sync.RWMutex
	handleLogArgsForCall []struct {
		arg1 int64
	}
	handleLogReturns struct {
		result1 string
	}
	handleLogReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRollingTrafficList) HandleLog(arg1 int64) string {
	fake.handleLogMutex.Lock()
	ret, specificReturn := fake.handleLogReturnsOnCall[len(fake.handleLogArgsForCall)]
	fake.handleLogArgsForCall = append(fake.handleLogArgsForCall, struct {
		arg1 int64
	}{arg1})
	fake.recordInvocation("HandleLog", []interface{}{arg1})
	fake.handleLogMutex.Unlock()
	if fake.HandleLogStub != nil {
		return fake.HandleLogStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.handleLogReturns
	return fakeReturns.result1
}

func (fake *FakeRollingTrafficList) HandleLogCallCount() int {
	fake.handleLogMutex.RLock()
	defer fake.handleLogMutex.RUnlock()
	return len(fake.handleLogArgsForCall)
}

func (fake *FakeRollingTrafficList) HandleLogCalls(stub func(int64) string) {
	fake.handleLogMutex.Lock()
	defer fake.handleLogMutex.Unlock()
	fake.HandleLogStub = stub
}

func (fake *FakeRollingTrafficList) HandleLogArgsForCall(i int) int64 {
	fake.handleLogMutex.RLock()
	defer fake.handleLogMutex.RUnlock()
	argsForCall := fake.handleLogArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRollingTrafficList) HandleLogReturns(result1 string) {
	fake.handleLogMutex.Lock()
	defer fake.handleLogMutex.Unlock()
	fake.HandleLogStub = nil
	fake.handleLogReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeRollingTrafficList) HandleLogReturnsOnCall(i int, result1 string) {
	fake.handleLogMutex.Lock()
	defer fake.handleLogMutex.Unlock()
	fake.HandleLogStub = nil
	if fake.handleLogReturnsOnCall == nil {
		fake.handleLogReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.handleLogReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeRollingTrafficList) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.handleLogMutex.RLock()
	defer fake.handleLogMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRollingTrafficList) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ monitor.RollingTrafficList = new(FakeRollingTrafficList)
